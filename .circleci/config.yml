__steps:
  - checkout: &checkout
      path: ~/project
  - run: &dockerauth
      command: echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
  - run: &gcloudauth
      command: |
          echo ${GOOGLE_AUTH} > ${HOME}/gcp-key.json
          gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
          gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
          gcloud auth configure-docker
  - run: &deploy
      name: deploy
      command: |
        gcloud container clusters get-credentials ${GCLOUD_CLUSTER_ID} --zone=${GOOGLE_COMPUTE_ZONE}
        helm init --service-account tiller --upgrade
        COMMIT_SHA=$CIRCLE_SHA1 myke preview
        COMMIT_SHA=$CIRCLE_SHA1 HELM_XTRA_ARGS=$HELM_XTRA_ARGS myke deploy
  - run: &notify0
      when: on_success
      command: TEST_RESULT=0 DOMAIN="$K8S_NAMESPACE.$DOMAIN" myke _circle_notify
  - run: &notify1
      when: on_fail
      command: TEST_RESULT=1 DOMAIN="$K8S_NAMESPACE.$DOMAIN" myke _circle_notify
  - run: &initsubmodules git submodule sync && git submodule update --init

version: 2
jobs:
  backend_test:
    working_directory: ~/project/backend
    docker:
      - image: circleci/node:8
      - image: circleci/mariadb
        environment: 
          MYSQL_DATABASE: opla_test

    steps:
      - checkout: *checkout
      - run: *initsubmodules
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          - v1-dependencies-
      - run: yarn install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run: timeout 60 sh -c 'until nc -z $0 $1; do sleep 1; done' 127.0.0.1 3306
      - run: bin/opla init --non-interactive --database-name opla_test
      - run: bin/opla migrations up
      - run: yarn lint
      - run: yarn test
  
  backend_build:
    working_directory: ~/project/backend
    docker: 
      - image: licarth/ci-cd:latest
    environment:
      K8S_ENV: qa
      K8S_NAMESPACE: qa-ce
      CLOUDSDK_CORE_DISABLE_PROMPTS: "1"
    steps:
      - checkout: *checkout
      - run: *initsubmodules
      - setup_remote_docker
      - run: *dockerauth
      - run: myke backend/ci_build --COMMIT_SHA=$CIRCLE_SHA1 --BUILD_NUMBER=$CIRCLE_BUILD_NUM

  backend_e2e_test:
    working_directory: ~/project/backend
    docker:
      - image: licarth/ci-cd:latest
    environment: 
      K8S_ENV: qa
      GCLOUD_CLUSTER_ID: qa

    steps:
      - checkout: *checkout
      - run: *initsubmodules
      - run: *gcloudauth
      - run: |
          export K8S_NAMESPACE=circleci-$CIRCLE_BUILD_NUM
          gcloud container clusters get-credentials ${GCLOUD_CLUSTER_ID} --zone=${GOOGLE_COMPUTE_ZONE}
          helm init --service-account tiller --upgrade
          COMMIT_SHA=$CIRCLE_SHA1 myke preview
          COMMIT_SHA=$CIRCLE_SHA1 HELM_XTRA_ARGS="--set tls=false" myke deploy
      - run: |
          export K8S_NAMESPACE=circleci-$CIRCLE_BUILD_NUM
          retry -s 1 -t 60 myke e2e_test
      - run:
          command: |
            export K8S_NAMESPACE=circleci-$CIRCLE_BUILD_NUM
            echo $HELM_XTRA_ARGS && kubectl delete ns circleci-$CIRCLE_BUILD_NUM
          when: always

  backend_promote:
    working_directory: ~/project/backend
    docker: 
      - image: licarth/ci-cd:latest
    steps:
      - checkout: *checkout
      - run: *initsubmodules
      - setup_remote_docker
      - run: *dockerauth
      - run: myke backend/ci_promote --COMMIT_SHA=$CIRCLE_SHA1

  backend_deploy_qa:
    working_directory: ~/project/backend
    docker:
      - image: licarth/ci-cd:latest
    environment:
      K8S_ENV: qa
      K8S_NAMESPACE: qa-ce
      GCLOUD_CLUSTER_ID: qa
    steps:
      - checkout: *checkout
      - run: *initsubmodules
      - run: *gcloudauth
      - run: *deploy
      - run: *notify0
      - run: *notify1

  backend_deploy_preprod:
    working_directory: ~/project/backend
    docker:
      - image: licarth/ci-cd:latest
    environment:
      K8S_ENV: preprod
      K8S_NAMESPACE: preprod-ce
      GCLOUD_CLUSTER_ID: qa
    steps:
      - checkout: *checkout
      - run: *initsubmodules
      - run: *gcloudauth
      - run: *deploy
      - run: *notify0
      - run: *notify1

  backend_deploy_prod:
    working_directory: ~/project/backend
    docker:
      - image: licarth/ci-cd:latest
    environment:
      K8S_ENV: prod
      K8S_NAMESPACE: prod-ce
      GCLOUD_CLUSTER_ID: qa
    steps:
      - checkout: *checkout
      - run: *initsubmodules
      - run: *gcloudauth
      - run: *deploy
      - run: *notify0
      - run: *notify1
  
  backend_backup_prod:
    working_directory: ~/project/backend
    docker:
      - image: licarth/ci-cd:latest
    environment:
      K8S_ENV: prod
      K8S_NAMESPACE: prod-ce
      GCLOUD_CLUSTER_ID: qa
    steps:
      - checkout: *checkout
      - run: *initsubmodules
      - run: *gcloudauth
      - run: 
          name: backup mariadb
          command: |
            gcloud container clusters get-credentials ${GCLOUD_CLUSTER_ID} --zone=${GOOGLE_COMPUTE_ZONE}
            helm init --service-account tiller --upgrade
            COMMIT_SHA=$CIRCLE_SHA1 myke backup_db
  
  backend_backup_preprod:
    working_directory: ~/project/backend
    docker:
      - image: licarth/ci-cd:latest
    environment:
      K8S_ENV: preprod
      K8S_NAMESPACE: preprod-ce
      GCLOUD_CLUSTER_ID: qa
    steps:
      - checkout: *checkout
      - run: *initsubmodules
      - run: *gcloudauth
      - run: 
          name: backup mariadb
          command: |
            gcloud container clusters get-credentials ${GCLOUD_CLUSTER_ID} --zone=${GOOGLE_COMPUTE_ZONE}
            helm init --service-account tiller --upgrade
            COMMIT_SHA=$CIRCLE_SHA1 myke backup_db

  front_test:
    working_directory: ~/project/front
    docker:
      - image: circleci/node:8
    steps:
      - checkout: *checkout
      - run: *initsubmodules
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          - v1-dependencies-

      - run: yarn install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
        
      - run: yarn lint
      - run: yarn test
  
  front_build:
    working_directory: ~/project/front
    docker: 
      - image: licarth/ci-cd:latest
    environment:
      K8S_ENV: qa
      K8S_NAMESPACE: qa-ce
      CLOUDSDK_CORE_DISABLE_PROMPTS: "1"
    steps:
      - checkout: *checkout
      - run: *initsubmodules
      - setup_remote_docker
      - run: *dockerauth
      - run: myke front/ci_build --COMMIT_SHA=$CIRCLE_SHA1 --BUILD_NUMBER=$CIRCLE_BUILD_NUM

  front_promote:
    working_directory: ~/project/front
    docker: 
      - image: licarth/ci-cd:latest
    steps:
      - checkout: *checkout
      - run: *initsubmodules
      - setup_remote_docker
      - run: *dockerauth
      - run: myke front/ci_promote --COMMIT_SHA=$CIRCLE_SHA1

  front_deploy_qa:
    working_directory: ~/project/front
    docker:
      - image: licarth/ci-cd:latest
    environment:
      K8S_ENV: qa
      K8S_NAMESPACE: qa-ce
      GCLOUD_CLUSTER_ID: qa
    steps:
      - checkout: *checkout
      - run: *initsubmodules
      - run: *gcloudauth
      - run: *deploy
      - run: *notify0
      - run: *notify1

  front_deploy_preprod:
    working_directory: ~/project/front
    docker:
      - image: licarth/ci-cd:latest
    environment:
      K8S_ENV: preprod
      K8S_NAMESPACE: preprod-ce
      GCLOUD_CLUSTER_ID: qa
    steps:
      - checkout: *checkout
      - run: *initsubmodules
      - run: *gcloudauth
      - run: *deploy
      - run: *notify0
      - run: *notify1

  front_deploy_prod:
    working_directory: ~/project/front
    docker:
      - image: licarth/ci-cd:latest
    environment:
      K8S_ENV: prod
      K8S_NAMESPACE: prod-ce
      GCLOUD_CLUSTER_ID: qa

    steps:
      - checkout: *checkout
      - run: *initsubmodules
      - run: *gcloudauth
      - run: *deploy
      - run: *notify0
      - run: *notify1

workflows:
  version: 2
  test_and_deploy:
    jobs:
      - backend_test:
          filters:
            branches:
              ignore: gh-pages
            tags:
              only: /.*/
      - backend_build
      # - backend_e2e_test:
      #     requires:
      #       - backend_build
      # - backend_promote:
      #     requires:
      #       - backend_e2e_test
      #     filters:
      #       branches:
      #         only: 
      #           - master
      # - backend_deploy_qa:
      #     requires:
      #       - backend_promote
      # - backend_deploy_preprod:
      #     requires:
      #       - backend_promote
      # - backend_manual_check:
      #    type: approval
      #    requires:
      #      - backend_deploy_preprod
      #      - backend_deploy_qa
      # - backend_deploy_prod:
      #     requires:
      #       - backend_manual_check
      - front_test:
          filters:
            branches:
              ignore: gh-pages
            tags:
              only: /.*/
      - front_build
      # - front_promote:
      #     requires:
      #       - front_build
      #       - front_test
      #     filters:
      #       branches:
      #         only: 
      #           - master
      #           - infra-update
      # - front_deploy_qa:
      #     requires:
      #       - front_promote
      # - front_deploy_preprod:
      #     requires:
      #       - front_promote
      # - front_manual_check:
      #     type: approval
      #     requires:
      #       - front_deploy_preprod
      #       - front_deploy_qa
      # - front_deploy_prod:
      #     requires:
      #       - front_manual_check
  # backup_daily:
  #   triggers:
  #     - schedule:
  #         cron: "0 3 * * *"
  #         filters:
  #           branches:
  #             only:
  #               - master
  #   jobs:
  #     - backend_backup_prod
  #     - backend_backup_preprod
